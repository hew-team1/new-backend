// Code generated by go-swagger; DO NOT EDIT.

package generated_swagger

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateRecruitRequest CreateRecruitRequest
//
// 募集作成時のリクエスト
//
// swagger:model CreateRecruitRequest
type CreateRecruitRequest struct {

	// 募集に対して参加できる頻度
	// Example: 3
	// Required: true
	// Enum: [1 2 3 4 5 6 7]
	CommitFrequency *string `json:"commit_frequency"`

	// 募集の参加ハッカソンの開発の終了日
	// Example: 2006-01-02
	// Required: true
	// Format: date
	EndDate *strfmt.Date `json:"end_date"`

	// 募集の参加ハッカソンに賞があるかどうか
	// Required: true
	IsAward *bool `json:"is_award"`

	// 募集が初心者歓迎かどうか
	// Required: true
	IsBeginner *bool `json:"is_beginner"`

	// 募集の参加者数
	// Required: true
	JoinNumber *int64 `json:"join_number"`

	// 募集のメッセージ
	// Example: みんなでわいわい話しながら開発がしたいです！
	// Required: true
	Message *string `json:"message"`

	// 募集の参加ハッカソンの開催者
	// Example: Google
	// Required: true
	Organizer *string `json:"organizer"`

	// 募集の参加者がやりとりをするSlackのURL
	// Example: https://example.com
	// Required: true
	// Format: uri
	SlackURL *strfmt.URI `json:"slack_url"`

	// 募集の参加ハッカソンの開発の開始日
	// Example: 2006-01-02
	// Required: true
	// Format: date
	StartDate *strfmt.Date `json:"start_date"`

	// 募集のタイトル
	// Example: ハッカソンに参加しよう！
	// Required: true
	Title *string `json:"title"`
}

// Validate validates this create recruit request
func (m *CreateRecruitRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCommitFrequency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsAward(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsBeginner(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJoinNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganizer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlackURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var createRecruitRequestTypeCommitFrequencyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["1","2","3","4","5","6","7"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createRecruitRequestTypeCommitFrequencyPropEnum = append(createRecruitRequestTypeCommitFrequencyPropEnum, v)
	}
}

const (

	// CreateRecruitRequestCommitFrequencyNr1 captures enum value "1"
	CreateRecruitRequestCommitFrequencyNr1 string = "1"

	// CreateRecruitRequestCommitFrequencyNr2 captures enum value "2"
	CreateRecruitRequestCommitFrequencyNr2 string = "2"

	// CreateRecruitRequestCommitFrequencyNr3 captures enum value "3"
	CreateRecruitRequestCommitFrequencyNr3 string = "3"

	// CreateRecruitRequestCommitFrequencyNr4 captures enum value "4"
	CreateRecruitRequestCommitFrequencyNr4 string = "4"

	// CreateRecruitRequestCommitFrequencyNr5 captures enum value "5"
	CreateRecruitRequestCommitFrequencyNr5 string = "5"

	// CreateRecruitRequestCommitFrequencyNr6 captures enum value "6"
	CreateRecruitRequestCommitFrequencyNr6 string = "6"

	// CreateRecruitRequestCommitFrequencyNr7 captures enum value "7"
	CreateRecruitRequestCommitFrequencyNr7 string = "7"
)

// prop value enum
func (m *CreateRecruitRequest) validateCommitFrequencyEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createRecruitRequestTypeCommitFrequencyPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CreateRecruitRequest) validateCommitFrequency(formats strfmt.Registry) error {

	if err := validate.Required("commit_frequency", "body", m.CommitFrequency); err != nil {
		return err
	}

	// value enum
	if err := m.validateCommitFrequencyEnum("commit_frequency", "body", *m.CommitFrequency); err != nil {
		return err
	}

	return nil
}

func (m *CreateRecruitRequest) validateEndDate(formats strfmt.Registry) error {

	if err := validate.Required("end_date", "body", m.EndDate); err != nil {
		return err
	}

	if err := validate.FormatOf("end_date", "body", "date", m.EndDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CreateRecruitRequest) validateIsAward(formats strfmt.Registry) error {

	if err := validate.Required("is_award", "body", m.IsAward); err != nil {
		return err
	}

	return nil
}

func (m *CreateRecruitRequest) validateIsBeginner(formats strfmt.Registry) error {

	if err := validate.Required("is_beginner", "body", m.IsBeginner); err != nil {
		return err
	}

	return nil
}

func (m *CreateRecruitRequest) validateJoinNumber(formats strfmt.Registry) error {

	if err := validate.Required("join_number", "body", m.JoinNumber); err != nil {
		return err
	}

	return nil
}

func (m *CreateRecruitRequest) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("message", "body", m.Message); err != nil {
		return err
	}

	return nil
}

func (m *CreateRecruitRequest) validateOrganizer(formats strfmt.Registry) error {

	if err := validate.Required("organizer", "body", m.Organizer); err != nil {
		return err
	}

	return nil
}

func (m *CreateRecruitRequest) validateSlackURL(formats strfmt.Registry) error {

	if err := validate.Required("slack_url", "body", m.SlackURL); err != nil {
		return err
	}

	if err := validate.FormatOf("slack_url", "body", "uri", m.SlackURL.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CreateRecruitRequest) validateStartDate(formats strfmt.Registry) error {

	if err := validate.Required("start_date", "body", m.StartDate); err != nil {
		return err
	}

	if err := validate.FormatOf("start_date", "body", "date", m.StartDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CreateRecruitRequest) validateTitle(formats strfmt.Registry) error {

	if err := validate.Required("title", "body", m.Title); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create recruit request based on context it is used
func (m *CreateRecruitRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CreateRecruitRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateRecruitRequest) UnmarshalBinary(b []byte) error {
	var res CreateRecruitRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
