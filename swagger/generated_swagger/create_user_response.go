// Code generated by go-swagger; DO NOT EDIT.

package generated_swagger

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateUserResponse CreateUserResponse
//
// ユーザ作成時のレスポンス
//
// swagger:model CreateUserResponse
type CreateUserResponse struct {

	// ユーザ情報の作成日時
	CreatedAt string `json:"created_at,omitempty"`

	// ユーザのメールアドレス
	// Example: user@example.com
	// Format: email
	Email strfmt.Email `json:"email,omitempty"`

	// ユーザのid
	ID int64 `json:"id,omitempty"`

	// ユーザの名前
	// Example: 開発太郎
	Name string `json:"name,omitempty"`

	// ユーザのfirebaseの識別子
	// Example: aBcdEfgh1gklMn0p9rstuvwXyZ
	UID string `json:"uid,omitempty"`

	// ユーザ情報の更新日時
	UpdatedAt string `json:"updated_at,omitempty"`
}

// Validate validates this create user response
func (m *CreateUserResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateUserResponse) validateEmail(formats strfmt.Registry) error {
	if swag.IsZero(m.Email) { // not required
		return nil
	}

	if err := validate.FormatOf("email", "body", "email", m.Email.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create user response based on context it is used
func (m *CreateUserResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CreateUserResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateUserResponse) UnmarshalBinary(b []byte) error {
	var res CreateUserResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
