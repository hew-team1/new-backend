// Code generated by go-swagger; DO NOT EDIT.

package generated_swagger

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Member Member
//
// 募集の参加者の情報
//
// swagger:model Member
type Member struct {

	// 参加者のポジション
	// Example: frontend
	// Enum: [frontend backend infra]
	Position string `json:"position,omitempty"`

	// 参加する募集のid
	// Example: 111
	RecruitID int64 `json:"recruit_id,omitempty"`

	// 参加者のid
	// Example: 212
	UserID int64 `json:"user_id,omitempty"`
}

// Validate validates this member
func (m *Member) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePosition(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var memberTypePositionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["frontend","backend","infra"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		memberTypePositionPropEnum = append(memberTypePositionPropEnum, v)
	}
}

const (

	// MemberPositionFrontend captures enum value "frontend"
	MemberPositionFrontend string = "frontend"

	// MemberPositionBackend captures enum value "backend"
	MemberPositionBackend string = "backend"

	// MemberPositionInfra captures enum value "infra"
	MemberPositionInfra string = "infra"
)

// prop value enum
func (m *Member) validatePositionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, memberTypePositionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Member) validatePosition(formats strfmt.Registry) error {
	if swag.IsZero(m.Position) { // not required
		return nil
	}

	// value enum
	if err := m.validatePositionEnum("position", "body", m.Position); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this member based on context it is used
func (m *Member) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Member) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Member) UnmarshalBinary(b []byte) error {
	var res Member
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
